#+title: SVG PROJECT
* Design Process
** Empathize
   - What I wanted to do with vector graphics
     - Basically I want to draw worlds from french comics and old scifi.
       - Problem is I have no skills.
       - Moebius with economical line work can create deep perspective.
       - Noob-level view of why Moebius is great
         - AV Club mentions his draftmanship
         - Newness at many levels of detail
           - Strange outfits
           - Strange characters
           - Complex and unusual buildings
           - New thoughful vehicles
           - =Things readers recognize, but made unusual, alien=
         - Blissful settings
           - Beautiful trees
           - Expansive Deserts
           - Mountains
     - Free drawing and developing complex and interesting shapes is very satisfying
       - =Following that free drawing video--drawing to clear your mind=
       - Sometimes developing ideas becomes more tedious once the first bold ideas are set out
       - There is also the likely hood that the artist runs out of ideas
       - Free drawing allows me to create much more flowing and exciting shapes
         - I struggle bringing those free flowing shapes into more coherent compositions
     - The colors in Moebius are also so pleasant, gentle gradients
       - This is so frustrating when drawing to capture any small part of
         - This is due both to a lack of skill and a lack of equipment
   - =From Kristyn=
     - Making patterns
     - Geometric patters, textures, etc.
     - Avoid copy and paste and alignments
     - /I like that I don't have to draw, they make the lines for me/
           

** Define
   - The bezier curve format is a intuitive, pleasurable way to create drawings
     - It excuses you from needing manual skill
       - You can use instead your knowledge, judgement, and taste
   - =reframe=
     - This is obviously too vague
     - After building a few functions using these classes I realize I would like to work on something that allows small coherent shapes with some symmetry and some randomness to be built and then copied and varied around the image in a simple generative way.
     - 
** Ideate
*** Moebius grass generator
     - Waypoints:
       1. Basic svg classes
       2. Random small arch generator
       3. Perspective on Random small arch generator
   - Polygon tiler
   - fitting svg to line ML project
   - perspective tools in svg
   - Moebius smoke generator
*** Misc Object functions
    - Expand from center of object
    - Reflect portions through some intuitive centerline
    - Add color sooner, make hack to steal from coolor.co.
    - Function to switch from absolute to relative.
    - Need to experiment with nesting svg files READ MORE

*** Creature world
    - Create generative small creatures with interesting colors and symmetry.
    - Maybe animate them in an intersting way

** Prototype
   - Built a few functions that work with these classes <2020-03-07 Sat>.
   - Need to build objects with numpy to have more meaningful methods of alteration. Maybe simplify the classes/ figure out how to org them better to be manipulatable with numpy commands.
** Test
** Accept

Paths determining the directions of other paths.

* DONE [6/6] Text templates to make 
  CLOSED: [2020-03-07 Sat 11:26]
  - [X] Outer wrapper
  - [X] Rectangle
  - [X] Circle
  - [X] Line
  - [X] Text
  - [X] Paths
* DONE [9/9] Initial Classes Build
  CLOSED: [2020-03-07 Sat 11:24]
  * [X] Open and close the file
  * [X] Numpy arange to create a set of points.
  * [X] Figure out unpacking a dict or whatever into the format method.
  * [X] Create a way to manage total file size so my work doesn't go off the page.
  * [X] Create external methods to load templates cleanly
  * [X] Create methods to build the svg hiding all the ugly encoding stuff.
  * [X] Build a shape class.
  * [X] Build individual shape subclasses.
    - Path subclass will be the most difficult
      - There is no performance penalty for using paths vs polylines or polygons.
      - the commands
        - /lowercase means relative, uppercase means absolute/
        - m/M: moveto
          - specifies where the drawing should start
        - l/L: lineto
          - takes x,y coordinates and draws a line from the current position
        - h/H: horizontal lineto =going to skip this=
          - takes a single parameter, x, and draws a horiz line
        - v/V: vertical lineto =also skip this=
          - takes a single parameter, y, and draws a vert line
        - c/C: curveto
          -This is the cubic Bezier curve, it takes three points along with the initial point. 
        - s/S: smooth curveto
          - This shortcuts the next curve by mirroring the current handle.
          - B/C of this only requires two points.
        - q/Q: quadratic Bezier curve =skip this but implement later=
          - Quadratic Bezier curve works with only one point
        - t/T: smooth quadratic Bezier curveto
        - a/A: elliptical arc
        - z/Z: closepath
          - Draws a line from the current position to the first point.
      - The stroke attributes
        - stroke: string or hex value for color
        - fill: string or hex value for color
        - stroke-opacity: 0 - 1
        - fill-opacity: 0 - 1
        - stroke-width: integer for width
        - stroke-linecap: butt, round, square
        - stroke-linejoin: miter, round, bevel
        - stroke-dasharray: a series of numbers that defines the dash
    - Rect subclass
    - Circle subclass
    - Polygon subclass
    - Polyline subclass
  * [X] Build a svg image object.
    - Methods:
      - Add shape
      - Save file
* [0/5] Basic Methods
  1. [ ] Expand from center
  2. [ ] Reflect over centerline
  3. [ ] Rotate
  4. [ ] Figure out LA of projecting 3d into 2d.
  5. [ ] That linear regression idea.


* 

* [0/4] Extras
  - [ ] A thoughtful way to incorporate nice colors.
  - [ ] Explore Animations
  - [ ] Approaches to generating perspective and space in generative selfoprocesses.
  - [ ] If you ever create a combine SVG method, it should find the nearest endpoint.
* Notes from Bezier curve book
  - Bezier curves are parmetric.
  - Parameterization of a circle is x = cost(t), y = sin(t).
  - =Binomial polynomial=
    - linear = (1-t) + t
    - square = (1-t)**2 + 2(1-t) * t + t**2
    - cubic = (1-t)**3 + 3 *(1-t)**2 + 3*(1-t) * t**2 + t**3
      - if we sub a for (1-t) and b for t and remove the weights you have this pattern:
        - a + b
        - a * a + a * b + b * b
        - a * a * a + a * a * b + a * b * b + b * b * b
      - The weights follow pascals triangle:
        - 1 + 1
        - 1 + 2 + 1
        - 1 + 3 + 3 + 1
        - 1 + 4 + 6 + 4 + 1
    - sum i=0 -> n (n choose i) * (1-t)**(n-i) * t**i * weight(i)/this is the general formula/

